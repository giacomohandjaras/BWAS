function sample_size_adjustment = compute_sample_size_adjustment(rhos, sample_size_range, n_samples, alpha_levels, n_full_sample, n_studies, n_boots, ci_percentiles, random_seed)
% coded by Luca Cecchetti & Giacomo Handjaras, IMT-Lucca, Italy
% vers 20220619

%rhos = [0.05 0.1 0.15 0.2];
%sample_sizes = [250 500 1000 2500 5000 10000 25000 50000];
%alpha_levels = 0.05;
%n_full_sample = 100000;
%n_studies = 1000;
%n_boots = 1000;
%ci_percentiles = 2.5:2.5:97.5;
%random_seed = 15012018;

% Begin of the analysis part
fprintf('\n-----------------------------------\n')
fprintf('| Estimate Sample Size Adjustment |\n')
fprintf('-----------------------------------\n')

% Timestamp: start
t0 = tic;

% Fix the seed for reproducibility
rng(random_seed)

% Number of effect sizes
n_rhos = numel(rhos);

% Number of confidence intervals percentiles
n_percentiles = numel(ci_percentiles);

% Number of alpha levels
n_alpha_levels = numel(alpha_levels);

% Standard deviation of the distribution that generates simulated data
sigma = 0.1;

% Tolerance in the absolute difference between original correlation values
% and simulated correlation values
tolerance = 1e-4;

% Generate n log-spaced values to determine sample size of smaller n
% studies
sample_sizes = round(...
    logspace(...
    log10(sample_size_range(1)),...
    log10(sample_size_range(2)),...
    n_samples));

% Preallocate a matrix to store the percentile of the confidence interval
% that corresponds to correlation values in smaller studies which better
% approximate the true effect size measured in the full sample.
% As smaller studies report inflated effect sizes (because of the
% significance threshold), we must correct for this inflation when
% estimating the sample needed by a new study to replicate the findings
mean_optimal_ci_percentile = nan(n_rhos,n_samples,n_alpha_levels);

% Generate random behavioral scores for the full sample using values drawn
% from a normal distribution
behavior_full_sample = sigma .* randn(n_full_sample, 1);

% Preallocate an array to store actual rhos for the full sample generated
% by the simulation
all_corr_full_sample = nan(n_rhos,1);

% Preallocate an array to store actual pvalues for the full sample
% generated by the simulation
all_p_full_sample = nan(n_rhos,1);

% Generate random matrix to initialize permutation scheme
overall_perm_scheme = rand(n_full_sample,n_studies);

% Get overall permutation scheme
[~,overall_perm_scheme] = sort(overall_perm_scheme,1);

% Trim overall permutation scheme to maximum number of observations in the
% largest subsample
overall_perm_scheme = overall_perm_scheme(1:sample_size_range(2),:);

% Preallocate a matrix to store correlation values of each single study for
% all the tested effect sizes and samples
all_corr_single_study = nan(n_rhos,n_samples,n_studies);

% Preallocate a matrix to store significance of correlation values of each 
% single study for all the tested effect sizes and samples
all_p_single_study = nan(n_rhos,n_samples,n_studies);

% For each true effect size (i.e., correlation value in the full sample)
for r = 1:n_rhos
    
    % Timestamp: start
    t1 = tic;
    
    % Determine the effect size
    rho = rhos(r);
    
    % Initialize a variable to control simulation precision
    rho_diff = 1;
    
    % Until precision is larger than tolerance
    while rho_diff > tolerance
        
        % Generate random brain data
        brain_temp = sigma .* randn(n_full_sample, 1);
        
        % Impose correlation between brain and behavior
        brain_full_sample = ...
            (rho/abs(rho)) * ...
            sqrt(rho^2) * ...
            behavior_full_sample + ...
            sqrt(1-rho^2) * ...
            brain_temp;
        
        % Estimate the correlation between brain and behavior in the full
        % sample
        [corr_full_sample,p_full_sample] = ...
            corr(behavior_full_sample,brain_full_sample);
        
        % Compute the difference between simulated and desired correlations
        rho_diff = abs(rho-corr_full_sample);
        
    end
    
    % Store the correlation in the full sample
    all_corr_full_sample(r) = corr_full_sample;
    
    % Store the pvalue of the correlation in the full sample
    all_p_full_sample(r) = p_full_sample;
    
    % For each sample size
    for s = 1:n_samples
        
        % Timestamp: start
        t2 = tic;
        
        % Determine the sample size
        sample_size = sample_sizes(s);
        
        % Provide feedback
        fprintf('Processing rho: %.3f; sample size: %d. ',...
            rho,sample_size);
        
        % Preallocate an array to store correlation observed in each
        % smaller n study
        corr_single_study = nan(n_studies,1);
        
        % Preallocate an array to store significance leve of the
        % correlation observed in each smaller n study
        p_single_study = nan(n_studies,1);
        
        % Preallocate a matrix to store the correlation value corresponding
        % to multiple percentiles of the confidence interval estimates of
        % the effect size found in each study
        ci_percentiles_study = nan(n_studies,n_percentiles);
        
        % Restrict number of random resamplings
        sample_perm_scheme = overall_perm_scheme(1:sample_size,:);
                
        % For each simulated smaller n study
        for t = 1:n_studies
            
            % Randomly select a subsample of participants from the full
            % sample
            perm_scheme = sample_perm_scheme(:,t);
            
            % Select simulated behavioral scores
            behavior_study = ...
                behavior_full_sample(perm_scheme);
            
            % Select simulated brain data
            brain_study = ...
                brain_full_sample(perm_scheme);
            
            % Estimate the brain-behavior correlation
            [corr_single_study(t),p_single_study(t)] = ...
                corr(behavior_study,brain_study);
            
            % Preallocate a matrix to store bootstrap distribution of the
            % effect size
            corr_study_boot = nan(n_boots,1);
            
            % Bootstrap is performed only for correlations (i.e., studies)
            % reporting significant results using the more lenient
            % threshold and with the same sign of the rho value used in the
            % simulation (i.e., to avoid sign flips)
            if p_single_study(t) < max(alpha_levels) && ...
                    sign(corr_full_sample) == sign(corr_single_study(t))
                
                % For each bootstrap
                for b = 1:n_boots
                    
                    % Create a random set of observations with replacement
                    boot_sample = randi([1 sample_size],1,sample_size);
                    
                    % Get behavioral data
                    behavior_study_boot = behavior_study(boot_sample);
                    
                    % Get brain data
                    brain_study_boot = brain_study(boot_sample);
                    
                    % Estimate the bootstrapped correlation
                    corr_study_boot(b) = ...
                        corr(behavior_study_boot,brain_study_boot);
                    
                end
                
                % Get bootstapped correlation values corresponding to the
                % desired percentiles
                ci_percentiles_study(t,:) = ...
                    prctile(corr_study_boot,ci_percentiles);
                
            end
            
        end
        
        % Store correlations for each smaller n study
        all_corr_single_study(r,s,:) = corr_single_study;
        
        % Store significance of correlations for each smaller n study
        all_p_single_study(r,s,:) = p_single_study;
        
        for p = 1:n_alpha_levels
            
            % Filter out studies not passing significance threshold
            ci_percentiles_significant_study = ...
                ci_percentiles_study(p_single_study < alpha_levels(p),:);
            
            % Find the position of the bootstrapped correlations in smaller
            % studies that better approximate the true effect size measured in
            % the full sample
            [~,idx] = ...
                min(abs(corr_full_sample - ...
                ci_percentiles_significant_study),...
                [],2);
            
            % Compute the average percentile across studies
            mean_optimal_ci_percentile(r,s,p) = mean(ci_percentiles(idx));
            
        end
        
        % Timestamp: stop
        elapsed_t2 = seconds(toc(t2));
        elapsed_t2.Format = 'hh:mm:ss.SSS';
        elapsed_t2 = string(elapsed_t2);
        
        % Provide feedback
        fprintf('Completed! Elapsed time: %s\n',...
            elapsed_t2);
        
    end
    
    % Timestamp: stop
    elapsed_t1 = seconds(toc(t1));
    elapsed_t1.Format = 'hh:mm:ss.SSS';
    elapsed_t1 = string(elapsed_t1);
    
    % Provide feedback
    fprintf('Completed %d out of %d! Elapsed time: %s\n',...
        r, n_rhos, elapsed_t1);
    
end

% Prepare output
sample_size_adjustment.mean_optimal_ci_percentile = ...
    mean_optimal_ci_percentile;
sample_size_adjustment.sample_sizes = ...
    sample_sizes;
sample_size_adjustment.all_corr_single_study = ...
    all_corr_single_study;
sample_size_adjustment.all_p_single_study = ...
    all_p_single_study;

% Timestamp: stop
elapsed_t0 = seconds(toc(t0));
elapsed_t0.Format = 'hh:mm:ss.SSS';
elapsed_t0 = string(elapsed_t0);

% Provide feedback
fprintf('All done! Elapsed time: %s\n',...
    elapsed_t0);

end
